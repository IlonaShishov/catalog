apiVersion: tekton.dev/v1beta1
kind: Task

metadata:
  name: redhat-codeready-dependency-analysis
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Security
    tekton.dev/pipelines.minVersion: "0.19.0"
    tekton.dev/tags: Security, Vulnenrability, CVE
    tekton.dev/displayName: "RedHat CodeReady Dependency Analysis"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The RedHat CodeReady Dependency Analysis task is an interface between Tekton and Red Hat CodeReady Dependency Analytics platform.
    It provides vulnerability and compliance analysis for applications dependencies, along with recommendations to address security vulnerabilities and licensing issues.

  workspaces:
    - name: output
      description: Volume backing this workspace is used for input/output of the task.

  params:
    - name: https-git-url
      description: Github URL to application.

    - name: manifest-file-path
      description: Path to target manifest file to perform analysis.

    - name: pkg-installation-directory-path
      description: Path to the directory in workspace, where the application is installed.

    - name: output-file-path
      description: Path to the file in workspace, where the analysis report is saved.

  steps:
    - name: clone-git-repo
      image: alpine/git
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh

        # init clean application directory
        if [ -d $(params.pkg-installation-directory-path) ]; then
          echo "Cleaning existing directory: $(params.pkg-installation-directory-path)..."
          rm -r $(params.pkg-installation-directory-path)
        fi

        # creating new application directory 
        mkdir -p $(params.pkg-installation-directory-path)

        # clone repository to application directory
        git clone $(params.https-git-url) $(params.pkg-installation-directory-path)

    - name: generate-bom
      image: maven:3.8.4-openjdk-11-slim
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh

        # running maven executable to generate BOM file
        echo "Run Maven and the CycloneDX Maven Plugin to generate a Bill of Materials (BOM) for project."
        mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.6:makeBom -DincludeTestScope=false -DoutputFormat=json -DoutputName=project-bom -f application-package/pom.xml

    - name: redhat-codeready-dependency-analysis
      image: alpine/httpie
      workingDir: $(workspaces.output.path)
      env:
        - name: SNYK_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: SNYK_TOKEN
      script: |
        #!/bin/sh

        printf "Analysing the stack. Please wait..\n\n"

        # running crda API on generated BOM file
        http crda-backend-dev-crda.apps.sssc-cl01.appeng.rhecoeng.com/api/v3/dependency-analysis/maven \
        Content-Type:"application/json" \
        Accept:"application/json" \
        crda-snyk-token:$SNYK_TOKEN \
        < $(params.pkg-installation-directory-path)/target/project-bom.json \
        > $(params.output-file-path)
        
        # Check the exit status
        if [ $? -ne 0 ]; then
          echo "HTTP request failed"
          exit 1
        # Check if the response file contains the "504 Gateway Time-out" message
        elif grep -q "504 Gateway Time-out" "$(params.output-file-path)"; then
          echo "Error: 504 Gateway Time-out"
          exit 1
        else
          echo "HTTP request succeeded"
        fi
      
    - name: print-report-summary
      image: quay.io/ishishov/ubi-jq:latest
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh

        # In case of success print details from report into console
        printf "RedHat CodeReady Dependency Analysis task is being executed.\n"
        printf "=%.0s" {1..60}
        printf "\nRedHat CodeReady Dependency Analysis Report\n"
        printf "=%.0s" {1..60}
        printf "\n"
        printf "Total Scanned Dependencies            :  %s \n" $(jq .summary.dependencies.scanned $(params.output-file-path))
        printf "Total Scanned Transitive Dependencies :  %s \n" $(jq .summary.dependencies.transitive $(params.output-file-path))
        printf "Total Vulnerabilities                 :  %s \n" $(jq .summary.vulnerabilities.total $(params.output-file-path))
        printf "Direct Vulnerable Dependencies        :  %s \n" $(jq .summary.vulnerabilities.direct $(params.output-file-path))

        provider_statuses=$(jq -c '.summary.providerStatuses[]' $(params.output-file-path))
        for provider_status in $provider_statuses; do         
          message=$(echo $provider_status | jq -r '.message')
          provider=$(echo $provider_status | jq -r '.provider')
          printf "%s Provider Status                  :  %s \n" $provider $message
        done

        printf "Critical Vulnerabilities              :  %s \n" $(jq .summary.vulnerabilities.critical $(params.output-file-path))
        printf "High Vulnerabilities                  :  %s \n" $(jq .summary.vulnerabilities.high $(params.output-file-path))
        printf "Medium Vulnerabilities                :  %s \n" $(jq .summary.vulnerabilities.medium $(params.output-file-path))
        printf "Low Vulnerabilities                   :  %s \n" $(jq .summary.vulnerabilities.low $(params.output-file-path))
        printf "=%.0s" {1..60}

        # determine build status
        tot_vul=$(jq .summary.vulnerabilities.total $(params.output-file-path))
        if [ $tot_vul -ge  1 ]; then
          printf "\nBUILD FAILED: Total vulnerability count is: $tot_vul"
          exit 1
        else
          printf "\nBUILD PASSED: Total vulnerability count is 0"
        fi