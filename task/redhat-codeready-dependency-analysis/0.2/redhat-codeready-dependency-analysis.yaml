apiVersion: tekton.dev/v1beta1
kind: Task

metadata:
  name: redhat-codeready-dependency-analysis
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Security
    tekton.dev/pipelines.minVersion: "0.19.0"
    tekton.dev/tags: Security, Vulnenrability, CVE
    tekton.dev/displayName: "RedHat CodeReady Dependency Analysis"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The RedHat CodeReady Dependency Analysis task is an interface between Tekton and Red Hat CodeReady Dependency Analytics platform.
    It provides vulnerability and compliance analysis for applications dependencies, along with recommendations to address security vulnerabilities and licensing issues.

  workspaces:
    - name: output
      description: Volume backing this workspace is used for input/output of the task.

  params:
    - name: manifest-file-path
      description: Path of target manifest file to perform analysis.

    - name: output-file-path
      description: Path to the file in workspace, where the analysis report is saved.

    - name: pkg-installation-directory-path
      description: Path to the directory in workspace, where the application is installed.

    - name: image
      description: Image where CRDA CLI binary and required applications are installed.

    - name: CRDA_HOST_URL
      description: The CRDA host, adjust this if you use an on premise environment.
      default: ''

    - name: CONSENT_TELEMETRY
      description: The CRDA consent telemetry.
      default: 'false'

  steps:
    - name: redhat-codeready-dependency-analysis
      image: $(params.image)
      workingDir: $(workspaces.output.path)
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: AUTH_TOKEN
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: CRDA_KEY
        - name: HOST
          value: $(params.CRDA_HOST_URL)
        - name: TELEMETRY
          value: $(params.CONSENT_TELEMETRY)
        - name: ECOSYSTEM

      script: |
        #!/bin/sh

        manifest=$(basename "$(params.manifest-file-path)")

        if [ "$manifest" = "requirements.txt" ]; then
          export ECOSYSTEM="python3"
        elif [ "$manifest" = "pom.xml" ]; then
          export ECOSYSTEM="maven"
        elif [ "$manifest" = "package.json" ]; then
          export ECOSYSTEM="npm"
        elif [ "$manifest" = "go.mod" ]; then
          export ECOSYSTEM="golang"
        else
          echo "Unsupported file: $manifest"
          exit 1
        fi

        echo "ECOSYSTEM: $ECOSYSTEM"

        sh /crda.sh \
        $(echo $(params.pkg-installation-directory-path)/$(params.manifest-file-path)) \
        $(params.output-file-path)
