apiVersion: tekton.dev/v1beta1
kind: Task

metadata:
  name: redhat-codeready-dependency-analysis
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Security
    tekton.dev/pipelines.minVersion: "0.19.0"
    tekton.dev/tags: Security, Vulnenrability, CVE
    tekton.dev/displayName: "RedHat CodeReady Dependency Analysis"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The RedHat CodeReady Dependency Analysis task is an interface between Tekton and Red Hat CodeReady Dependency Analytics platform.
    It provides vulnerability and compliance analysis for applications dependencies, along with recommendations to address security vulnerabilities and licensing issues.

  workspaces:
    - name: output
      description: Volume backing this workspace is used for input/output of the task.

  params:
    - name: https-git-url
      description: Github URL to application.

    - name: manifest-file-path
      description: Path of target manifest file to perform analysis.

    - name: pkg-installation-directory-path
      description: Path to the directory in workspace, where the application is installed.

    - name: output-file-path
      description: Path to the file in workspace, where the analysis report is saved.

    - name: CRDA_HOST_URL
      description: The CRDA host, adjust this if you use an on premise environment.
      default: ''

    - name: CONSENT_TELEMETRY
      description: The CRDA consent telemetry.
      default: 'false'

  steps:
    - name: clone-git-repo
      image: alpine/git
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh

        # init clean application directory
        if [ -d $(params.pkg-installation-directory-path) ]; then
          echo "Cleaning existing directory: $(params.pkg-installation-directory-path)..."
          rm -r $(params.pkg-installation-directory-path)
        fi

        # creating new application directory 
        mkdir -p $(params.pkg-installation-directory-path)

        # clone repository to application directory
        git clone $(params.https-git-url) $(params.pkg-installation-directory-path)

    - name: redhat-codeready-dependency-analysis-maven
      image: quay.io/ishishov/tekton-crda-maven:latest
      workingDir: $(workspaces.output.path)
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: AUTH_TOKEN
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: CRDA_KEY
        - name: HOST
          value: $(params.CRDA_HOST_URL)
        - name: TELEMETRY
          value: $(params.CONSENT_TELEMETRY)

      script: |
        #!/bin/sh

        if [ "$(basename "$(params.manifest-file-path)")" = "pom.xml" ]; then
          echo "Detected Maven package manager"

          sh /crda.sh \
          $(echo $(params.pkg-installation-directory-path)/$(params.manifest-file-path)) \
          $(params.output-file-path)
        else
          echo "Maven package manager not detected"
        fi

        
    - name: redhat-codeready-dependency-analysis-python
      image: quay.io/ishishov/tekton-crda-python:latest
      workingDir: $(workspaces.output.path)
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: AUTH_TOKEN
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: CRDA_KEY
        - name: HOST
          value: $(params.CRDA_HOST_URL)
        - name: TELEMETRY
          value: $(params.CONSENT_TELEMETRY)

      script: |
        #!/bin/sh

        if [ "$(basename "$(params.manifest-file-path)")" = "requirements.txt" ]; then
          echo "Detected Python package manager"

          python3 --version
          
          pip3 install --target=$(params.pkg-installation-directory-path) -r $(params.pkg-installation-directory-path)/$(params.manifest-file-path)

          sh /crda.sh \
          $(echo $(params.pkg-installation-directory-path)/$(params.manifest-file-path)) \
          $(params.output-file-path)
        else
          echo "Python package manager not detected"
        fi
      
    - name: redhat-codeready-dependency-analysis-npm
      image: quay.io/ishishov/tekton-crda-npm:latest
      workingDir: $(workspaces.output.path)
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: AUTH_TOKEN
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: CRDA_KEY
        - name: HOST
          value: $(params.CRDA_HOST_URL)
        - name: TELEMETRY
          value: $(params.CONSENT_TELEMETRY)

      script: |
        #!/bin/sh

        if [ "$(basename "$(params.manifest-file-path)")" = "package.json" ]; then
          echo "Detected NPM package manager"

          npm install --prefix $( dirname "$(params.pkg-installation-directory-path)/$(params.manifest-file-path)")

          sh /crda.sh \
          $(echo $(params.pkg-installation-directory-path)/$(params.manifest-file-path)) \
          $(params.output-file-path)
        else
          echo "NPM package manager not detected"
        fi


    - name: redhat-codeready-dependency-analysis-golang
      image: quay.io/ishishov/tekton-crda-golang:latest
      workingDir: $(workspaces.output.path)
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: crda
              key: AUTH_TOKEN
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: CRDA_KEY
        - name: HOST
          value: $(params.CRDA_HOST_URL)
        - name: TELEMETRY
          value: $(params.CONSENT_TELEMETRY)

      script: |
        #!/bin/sh

        if [ "$(basename "$(params.manifest-file-path)")" = "go.mod" ]; then
          echo "Detected Golang package manager"

          sh /crda.sh \
          $(echo $(params.pkg-installation-directory-path)/$(params.manifest-file-path)) \
          $(params.output-file-path)
        else
          echo "Golang package manager not detected"
        fi
        
    - name: post-task-setup
      image: quay.io/ishishov/tekton-crda-golang:latest
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh

        printf "Report file data:\n"
        jq . $(params.output-file-path)

        exit_code=$(jq -r '.exit_code' $(params.output-file-path))
        if [ "$exit_code" = "1" ]; then
          printf "\nBUILD FAILED: Failed to generate Dependency Analysis Report" 
          exit 1
        fi

        tot_vul=$(jq .report.total_vulnerabilities  $(params.output-file-path))
        if [ $tot_vul -ge  1 ]; then
          printf "\nBUILD FAILED: Total vulnerability count is: $tot_vul"
          exit 1
        else
          printf "\nBUILD PASSED: Total vulnerability count is 0"
        fi